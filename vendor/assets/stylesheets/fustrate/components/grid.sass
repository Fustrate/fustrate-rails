$row-width: rem-calc(1000)
$total-columns: 12
$column-gutter: rem-calc(30)

@function grid-calc($colNumber, $totalColumns)
  @return percentage($colNumber / $totalColumns)

// Use +grid-row(nest) to include a nested row
// Use +grid-row(collapse) to collapsed a container row margins
// Use +grid-row(nest-collapse) to collapse outer margins on a nested row
// Use +grid-row to use a container row
=grid-row($behavior: false)
  @if $behavior == nest
    width: auto
    margin-left: -($column-gutter / 2)
    margin-right: -($column-gutter / 2)
    margin-top: 0
    margin-bottom: 0
    max-width: none

  @else if $behavior == collapse
    width: 100%
    margin: 0
    max-width: $row-width

  @else if $behavior == nest-collapse
    width: auto
    margin: 0
    max-width: none

  @else
    width: 100%
    margin-left: auto
    margin-right: auto
    margin-top: 0
    margin-bottom: 0
    max-width: $row-width

  // Clearfix for all rows
  +clearfix

// Creates a column, should be used inside of a media query to control layouts
//
// $columns - The number of columns this should be
// $last-column - Is this the last column? Default: false.
// $center - Center these columns? Default: false.
// $offset - # of columns to offset. Default: false.
// $push - # of columns to push. Default: false.
// $pull - # of columns to pull. Default: false.
// $collapse - Get rid of gutter padding on column? Default: false.
// $float - Should this float? Default: true. Options: true, false, left, right.
=grid-column($columns: false, $last-column: false, $center: false, $offset: false, $push: false, $pull: false, $collapse: false, $float: true, $position: false)

  // If positioned for default .column, include relative position
  // push and pull require position set
  @if $position or $push or $pull
    position: relative

  // If collapsed, get rid of gutter padding
  @if $collapse
    padding-left: 0
    padding-right: 0

  @else if $collapse == false
    // Gutter padding whenever a column isn't set to collapse
    // (use $collapse: null to do nothing)
    padding-left: $column-gutter / 2
    padding-right: $column-gutter / 2

  // If a column number is given, calculate width
  @if $columns
    width: grid-calc($columns, $total-columns)

    // If last column, float naturally instead of to the right
    @if $last-column
      float: right

  // Source Ordering, adds left/right depending on which you use.
  @if $push
    left: grid-calc($push, $total-columns)
    right: auto
  @if $pull
    right: grid-calc($pull, $total-columns)
    left: auto

  @if $float
    @if $float == left or $float == true
      float: left
    @else if $float == right
      float: right
    @else
      float: none

  // If centered, get rid of float and add appropriate margins
  @if $center
    margin-left: auto
    margin-right: auto
    float: none

  // If offset, calculate appropriate margins
  @if $offset
    margin-left: grid-calc($offset, $total-columns) !important

// Create presentational classes for grid
//
// $size - Name of class to use, i.e. "large" will generate .large-1, .large-2, etc.
=grid-html-classes($size)
  @for $i from 0 through $total-columns - 1
    .#{$size}-push-#{$i}
      +grid-column($push: $i, $collapse: null, $float: false)

    .#{$size}-pull-#{$i}
      +grid-column($pull: $i, $collapse: null, $float: false)

  .column,
  .columns
    +grid-column($columns: false, $position: true)


  @for $i from 1 through $total-columns
    .#{$size}-#{$i}
      +grid-column($columns: $i, $collapse: null, $float: false)

  @for $i from 0 through $total-columns - 1
    .#{$size}-offset-#{$i}
      +grid-column($offset: $i, $collapse: null, $float: false)

  .#{$size}-reset-order
    margin-left: 0
    margin-right: 0
    left: auto
    right: auto
    float: left

  .column.#{$size}-centered,
  .columns.#{$size}-centered
    +grid-column($center: true, $collapse: null, $float: false)

  .column.#{$size}-uncentered,
  .columns.#{$size}-uncentered
    margin-left: 0
    margin-right: 0
    float: left

  // Fighting [class*="column"] + [class*="column"]:last-child
  .column.#{$size}-centered:last-child,
  .columns.#{$size}-centered:last-child
    float: none

  // Fighting .column.<previous-size>-centered:last-child
  .column.#{$size}-uncentered:last-child,
  .columns.#{$size}-uncentered:last-child
    float: left

  .column.#{$size}-uncentered.opposite,
  .columns.#{$size}-uncentered.opposite
    float: right

.row
  +grid-row

  &.fluid
    width: 100%
    max-width: 100%

  &.collapse
    > .column,
    > .columns
      +grid-column($collapse: true, $float: false)

    .row
      margin-left: 0
      margin-right: 0

  .row
    +grid-row(nest)

    &.collapse
      +grid-row(nest-collapse)

.column,
.columns
  +grid-column($columns: $total-columns)

[class*="column"] + [class*="column"]:last-child
  float: right
[class*="column"] + [class*="column"].end
  float: left

@media #{$small-up}
  +grid-html-classes($size: small)

@media #{$medium-up}
  +grid-html-classes($size: medium)

@media #{$large-up}
  +grid-html-classes($size: large)
  .large-column-count-2
    +columns(2)

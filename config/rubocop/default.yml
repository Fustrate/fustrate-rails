require:
  - rubocop-performance

AllCops:
  # Always enable new cops, disabling manually when they don't fit.
  EnabledByDefault: true
  NewCops: enable
  SuggestExtensions: false

# ----------------------------------------------------------------------------------------------------------------------
# Coding Style
# ----------------------------------------------------------------------------------------------------------------------

Layout/MultilineMethodCallIndentation:
  EnforcedStyle: indented

Lint/SuppressedException:
  AllowComments: true

Performance/FlatMap:
  EnabledForFlattenWithoutParams: true

Style/DateTime:
  AllowCoercion: true

# ----------------------------------------------------------------------------------------------------------------------
# Cops that should not be run
# ----------------------------------------------------------------------------------------------------------------------

# Recommends each array item be on its own line.
Layout/MultilineArrayLineBreaks:
  Enabled: false

# Recommends right hand side of multi-line assignment be on a new line
Layout/MultilineAssignmentLayout:
  Enabled: false

# Wants every argument in a multi-line method call to be on its own line
Layout/MultilineMethodArgumentLineBreaks:
  Enabled: false

# Recommends squishing a multi-line hash into one line. I don't like that. It's not readable.
Layout/RedundantLineBreak:
  Enabled: false

# Recommends `::File` instead of `File`
Lint/ConstantResolution:
  Enabled: false

# Recommends Integer(xxx, 10) instead of xxx.to_i
Lint/NumberConversion:
  Enabled: false

# Seriously? "Postmaster" is racist now?
Naming/InclusiveLanguage:
  Enabled: false

# String#drop is not a function, and besides, arr.drop(n) doesn't read better than arr[n..]
Performance/ArraySemiInfiniteRangeSlice:
  Enabled: false

# I want to chain flatten/compact/uniq
Performance/ChainArrayAllocation:
  Enabled: false

# Converts if-elsif to case-when.
Style/CaseLikeIf:
  Enabled: false

# Wants every constant to be listed in #public_constant or #private_constant
Style/ConstantVisibility:
  Enabled: false

# Converts [1, 2, three: 3] to [1, 2, { three: 3 }]
Style/HashAsLastArrayItem:
  Enabled: false

# Prefers `if !condition` over `unless condition`
Style/InvertibleUnlessCondition:
  Enabled: false

# Converts `a_method 1` to `a_method(1)`
Style/MethodCallWithArgsParentheses:
  Enabled: false

# Not every `if` needs an `else`
Style/MissingElse:
  Enabled: false

# Hashes that come from a database JSON column use strings for keys
Style/StringHashKeys:
  Enabled: false

# I consider myself capable of understanding logical operators in an unless
Style/UnlessLogicalOperators:
  Enabled: false
